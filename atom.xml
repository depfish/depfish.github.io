<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>opscoder</title>
  <icon>https://www.gravatar.com/avatar/ba4a4c9ed2a98e1ba0d030ca3449d4a5</icon>
  <subtitle>depfish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://opscoder.com/"/>
  <updated>2020-02-02T10:24:34.985Z</updated>
  <id>https://opscoder.com/</id>
  
  <author>
    <name>Murphy</name>
    <email>e-mail_address</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unix / Linux Signals and Traps</title>
    <link href="https://opscoder.com/article/Unix-Linux-Signals-and-Traps/"/>
    <id>https://opscoder.com/article/Unix-Linux-Signals-and-Traps/</id>
    <published>2020-02-02T08:56:08.000Z</published>
    <updated>2020-02-02T10:24:34.985Z</updated>
    
    <content type="html"><![CDATA[<p>Signals are software interrupts sent to a program to indicate that an important event has occurred. The events can vary from user requests to illegal memory access errors. Some signals, such as the interrupt signal, indicate that a user has asked the program to do something that is not in the usual flow of control.</p><p>The following table lists out common signals you might encounter and want to use in your programs −</p><table><thead><tr><th>Signal Name</th><th>Signal Number</th><th>Description</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>Hang up detected on controlling terminal or death of controlling process</td></tr><tr><td>SIGINT</td><td>2</td><td>Issued if the user sends an interrupt signal (Ctrl + C)</td></tr><tr><td>SIGQUIT</td><td>3</td><td>Issued if the user sends a quit signal (Ctrl + D)</td></tr><tr><td>SIGFPE</td><td>8</td><td>Issued if an illegal mathematical operation is attempted</td></tr><tr><td>SIGKILL</td><td>9</td><td>If a process gets this signal it must quit immediately and will not perform any clean-up operations</td></tr><tr><td>SIGALRM</td><td>14</td><td>Alarm clock signal (used for timers)</td></tr><tr><td>SIGTERM</td><td>15</td><td>Software termination signal (sent by kill by default)</td></tr></tbody></table><h3 id="list-of-signals">List of Signals</h3><p>There is an easy way to list down all the signals supported by your system. Just issue the kill -l command and it would display all the supported signals −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -l</span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL</span><br><span class="line"> 5) SIGTRAP      6) SIGABRT      7) SIGBUS       8) SIGFPE</span><br><span class="line"> 9) SIGKILL     10) SIGUSR1     11) SIGSEGV     12) SIGUSR2</span><br><span class="line">13) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGSTKFLT</span><br><span class="line">17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU</span><br><span class="line">25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH</span><br><span class="line">29) SIGIO       30) SIGPWR      31) SIGSYS      34) SIGRTMIN</span><br><span class="line">35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3  38) SIGRTMIN+4</span><br><span class="line">39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12</span><br><span class="line">47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14</span><br><span class="line">51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10</span><br><span class="line">55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-6</span><br><span class="line">59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure><p>The actual list of signals varies between Solaris, HP-UX, and Linux.</p><h3 id="default-actions">Default Actions</h3><p>Every signal has a default action associated with it. The default action for a signal is the action that a script or program performs when it receives a signal.<br>Some of the possible default actions are −</p><ul><li>Terminate the process.</li><li>Ignore the signal.</li><li>Dump core. This creates a file called core containing the memory image of the process when it received the signal.</li><li>Stop the process.</li><li>Continue a stopped process.</li></ul><h3 id="sending-signals">Sending Signals</h3><p>There are several methods of delivering signals to a program or script. One of the most common is for a user to type <strong>CONTROL-C</strong> or the <strong>INTERRUPT</strong> key while a script is executing.</p><p>When you press the <strong>Ctrl+C</strong> key, a <strong>SIGINT</strong> is sent to the script and as per defined default action script terminates.</p><p>The other common method for delivering signals is to use the <strong>kill command</strong>, the syntax of which is as follows −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -signal pid</span><br></pre></td></tr></table></figure><p>Here <strong>signal</strong> is either the number or name of the signal to deliver and <strong>pid</strong> is the process ID that the signal should be sent to. For Example −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -1 1001</span><br></pre></td></tr></table></figure><p>The above command sends the HUP or hang-up signal to the program that is running with <strong>process ID 1001</strong>. To send a kill signal to the same process, use the following command −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -9 1001</span><br></pre></td></tr></table></figure><p>This kills the process running with <strong>process ID 1001</strong>.</p><h3 id="trapping-signals">Trapping Signals</h3><p>When you press the <strong>Ctrl+C</strong> or <strong>Break</strong> key at your terminal during execution of a shell program, normally that program is immediately terminated, and your command prompt returns. This may not always be desirable. For instance, you may end up leaving a bunch of temporary files that won’t get cleaned up.</p><p>Trapping these signals is quite easy, and the trap command has the following syntax −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> commands signals</span><br></pre></td></tr></table></figure><p>Here command can be any valid Unix command, or even a user-defined function, and signal can be a list of any number of signals you want to trap.</p><p>There are two common uses for trap in shell scripts −</p><ul><li>Clean up temporary files</li><li>Ignore signals</li></ul><h3 id="cleaning-up-temporary-files">Cleaning Up Temporary Files</h3><p>As an example of the trap command, the following shows how you can remove some files and then exit if someone tries to abort the program from the terminal −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> <span class="string">"rm -f <span class="variable">$WORKDIR</span>/work1$$ <span class="variable">$WORKDIR</span>/dataout$$; exit"</span> 2</span><br></pre></td></tr></table></figure><p>From the point in the shell program that this trap is executed, the two files <strong>work1$$</strong> and <strong>dataout$$</strong> will be automatically removed if signal number 2 is received by the program.</p><p>Hence, if the user interrupts the execution of the program after this trap is executed, you can be assured that these two files will be cleaned up. The <strong>exit</strong> command that follows the <strong>rm</strong> is necessary because without it, the execution would continue in the program at the point that it left off when the signal was received.</p><p>Signal number 1 is generated for <strong>hangup</strong>. Either someone intentionally hangs up the line or the line gets accidentally disconnected.</p><p>You can modify the preceding trap to also remove the two specified files in this case by adding signal number 1 to the list of signals −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> <span class="string">"rm <span class="variable">$WORKDIR</span>/work1$$ <span class="variable">$WORKDIR</span>/dataout$$; exit"</span> 1 2</span><br></pre></td></tr></table></figure><p>Now these files will be removed if the line gets hung up or if the <strong>Ctrl+C</strong> key gets pressed.</p><p>The commands specified to trap must be enclosed in quotes, if they contain more than one command. Also note that the shell scans the command line at the time that the trap command gets executed and also when one of the listed signals is received.</p><p>Thus, in the preceding example, the value of <strong>WORKDIR</strong> and <strong>$$</strong> will be substituted at the time that the trap command is executed. If you wanted this substitution to occur at the time that either signal 1 or 2 was received, you can put the commands inside single quotes −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> <span class="string">'rm $WORKDIR/work1$$ $WORKDIR/dataout$$; exit'</span> 1 2</span><br></pre></td></tr></table></figure><h3 id="ignoring-signals">Ignoring Signals</h3><p>If the command listed for trap is null, the specified signal will be ignored when received. For example, the command −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> <span class="string">''</span> 2</span><br></pre></td></tr></table></figure><p>This specifies that the interrupt signal is to be ignored. You might want to ignore certain signals when performing an operation that you don’t want to be interrupted. You can specify multiple signals to be ignored as follows −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> <span class="string">''</span> 1 2 3 15</span><br></pre></td></tr></table></figure><p>Note that the first argument must be specified for a signal to be ignored and is not equivalent to writing the following, which has a separate meaning of its own −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span>  2</span><br></pre></td></tr></table></figure><p>If you ignore a signal, all subshells also ignore that signal. However, if you specify an action to be taken on the receipt of a signal, all subshells will still take the default action on receipt of that signal.</p><h3 id="resetting-traps">Resetting Traps</h3><p>After you’ve changed the default action to be taken on receipt of a signal, you can change it back again with the trap if you simply omit the first argument; so −</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> 1 2</span><br></pre></td></tr></table></figure><p>This resets the action to be taken on the receipt of signals 1 or 2 back to the default.</p><h3 id="sending-a-signal">Sending a signal</h3><pre><code>The following system calls and library functions allow the caller tosend a signal:raise(3)        Sends a signal to the calling thread.kill(2)         Sends a signal to a specified process, to all members                of a specified process group, or to all processes on                the system.killpg(3)       Sends a signal to all of the members of a specified                process group.pthread_kill(3) Sends a signal to a specified POSIX thread in the                same process as the caller.tgkill(2)       Sends a signal to a specified thread within a                specific process.  (This is the system call used to                implement pthread_kill(3).)sigqueue(3)     Sends a real-time signal with accompanying data to a                specified process.</code></pre><h3 id="more">More…</h3><p><a href="https://www.tutorialspoint.com/unix/unix-signals-traps.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/unix/unix-signals-traps.htm</a><br><a href="http://man7.org/linux/man-pages/man7/signal.7.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man7/signal.7.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Signals are software interrupts sent to a program to indicate that an important event has occurred. The events can vary from user request
      
    
    </summary>
    
    
    
      <category term="Signal" scheme="https://opscoder.com/tags/Signal/"/>
    
      <category term="Trap" scheme="https://opscoder.com/tags/Trap/"/>
    
      <category term="Linux" scheme="https://opscoder.com/tags/Linux/"/>
    
      <category term="Unix" scheme="https://opscoder.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>2019 Summary and 2020 Plan</title>
    <link href="https://opscoder.com/article/2019-Summary-and-2020-Plan/"/>
    <id>https://opscoder.com/article/2019-Summary-and-2020-Plan/</id>
    <published>2020-01-27T12:35:50.000Z</published>
    <updated>2020-01-30T04:05:41.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019">2019</h3><p>感觉2019没有白活，有所收获。偷空学习了Golang，突然对底层数据结构和算法感兴趣啦，对此乐此不疲。雅思词汇完成了一半。</p><h4 id="开年遇寒冬">开年遇寒冬</h4><p>2018年下半年中美贸易开战，裁员的新闻慢慢变得多起来，自己也嗅到经济不妙。<br>2019 新年伊始，就收到了董事会接管公司的消息，并把成都研发中心迁到北京(其实就是把成都裁掉，在北京重新组建团队)，公司各项开支也变得紧凑起来。这样在焦虑与不安中开启了2019。突然得面临找工作，整个春节都在想找工作的事。好在公司给了N+1赔偿和几个月的时间工作交接，可以慢慢找工作。</p><h4 id="偶然入育碧">偶然入育碧</h4><p>整个公司同事都在找工作，我顺便投了简历，很快接到了育碧人事的电话，隔天安排了在线测试。我对测试有本能的抵触，听到了是全英文考试，顿时来了兴趣。好几年没有全英文考试过了，决定试下。边跟同事聊天，边做测试题，就这样愉快地完成了考试。又隔了一两天都收到了on site面试邀请。</p><p>育碧就在马路对面，也不远，抱着锻炼下的心态，就答应了，打算过去聊聊，算是初面。很快就收到了反馈，说安排下一轮面试，由技术经理面试。听说是老外，我决心挑战下。经过一两周的等待，终于开始了面试。一看是2个老外，开场一顿寒暄，半开玩笑，不知不觉没有了紧张。</p><p>周末跟几个同事在锦城公园小聚，谈论间我才知道育碧是家做游戏的跨国大公司，出了《刺客信条》等大作，之前我只知道是家外企，貌似做游戏的，没有详细了解。</p><h4 id="重学golang">重学Golang</h4><p>自从上家公司官宣后，日常工作几乎停止。顿时感觉如释重负，突然变得闲起来，有点不适应。同事三五成群聚集在一起侃技术，聊找工作。闲暇之余，我开始学Golang。</p><p>这次我可以静心下来细细品味，Golang有啥独到之处，为啥成为云原生的首选语言。一年前初识Golang，感觉是反人类设计。<code>var</code>像JS，没有对象。现在了解的细节越多，越被Golang大道至简，高并发和工匠精神所折服。比如很多语言都有对象，而Golang没有，很多语言都有for/while/do while 循环，Golang就一个for循环搞定所有。很多语言时间格式描述一般是 <code>YY-mm-dd HH:MM:SS</code>，Golang却用 <code>2006-01-02 15:04:05</code> 来描述时间格式，这样一来，很容易记住。不少标准库函数用汇编写成，这样注定高效，比如sin,time.time。</p><p>进入育碧后，工作节奏慢下来，闲暇之余我有更多的时间学习Golang。能用Golang的地方，尽量用Golang，Goodbye Python。Golang是编译型语言，写代码的时候，我开始关注底层数据结构和算法，如何让程序更加高效又省资源。也开始了Leetcode 刷题，Think in Golang(用Golang的思维来写代码).</p><p>在育碧2019这一年，用Golang写了些小工具，自己用的挺嗨，老板也鼓励分享出来。</p><h4 id="深入源码">深入源码</h4><p>Golang的一些(标准)包，我直接看源码。测试华为云的时候，华为云的文档实在是混乱，不全。我只接从github拉 Terraform Huawei Cloud provider 源码，直接从源码里面找。K8s/Istio/V2ray/Docker 都零零碎碎看过一些源码，当然是不系统，也没能够全面理解。</p><h3 id="2020">2020</h3><p>总的来说，大方向不变，只作战术调整，不管工作如何变动。<br>给自己的定位：</p><ol><li>首先是一个开发者(Dev)</li><li>其次是一个运维(OPS)</li></ol><h4 id="初心不变">初心不变</h4><ul><li><strong>继续长期坚持每天学英语</strong>，<strong>每天进步一点点</strong>，用英语作关键词搜索，英语技术文章优先(先看英文原文，不懂再翻译成中文理解)，用英语思考。听说读写。继续学习雅思词汇。</li><li><strong>继续长期坚持学Golang</strong>，<strong>每天进步一点点</strong>，可以每天看Golang面试题，看Golang技术群，勤动脑，勤动手，多写。Golang是主要编程语言。</li><li><strong>继续刷题(Leetcode)</strong>，熟悉常用数据结构和算法，设计模式，Linux系统底层。</li><li><strong>继续跟进云原生全家桶</strong>，k8s/Service Mesh(Istio)/Serverless(Knative)。</li><li><strong>继续保持好奇心/钢铁侠/极客精神</strong></li></ul><h4 id="革命尚未成功">革命尚未成功</h4><p>2019年中旬面Singapore Shopee失败，2020年1月底(大年初四)，收到面Grab的拒信。</p><p>Shopee面试最后一道编程题没做出来，感觉是不难，我当时想多了。从此我意识到编程(刷题)的重要性。<br>Grab是2轮共2小时连在一起的，由2个人面试。第一个是Siu Ngee(新加坡女,ES专家级)，第二个是Weibin Wu(中国人,DB高级)。中国人给的反馈的结果是&quot;不错&quot;，问题估计出在Siu Ngee。跟Siu Ngee面，全程英语，可能有的技术点我没能用英语表达好，导致她以为我技术不行。她问的问题都是比较high level的，不太技术。Weibin开始我跟他聊英语，后面我就跟他讲中文了，没有沟通障碍。其实Weibin问的技术是比较深的，也比较全面。所以这次面试，吃了英语的亏。一定要从这次面试中汲取教训，<strong>英语有时比技术重要</strong>。Grab的推荐人，对我信心满满，我也挺有信心，谁知挂了！这也说明面试的不确定性，还是要广撒网，不能在一棵树上吊死，毕竟谁也无法保证一定能通过面试，尤其是大公司（小公司只要直接技术领导通过就OK了）。</p><p>2019肉翻未成功，2020继续努力。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2019&quot;&gt;2019&lt;/h3&gt;
&lt;p&gt;感觉2019没有白活，有所收获。偷空学习了Golang，突然对底层数据结构和算法感兴趣啦，对此乐此不疲。雅思词汇完成了一半。&lt;/p&gt;
&lt;h4 id=&quot;开年遇寒冬&quot;&gt;开年遇寒冬&lt;/h4&gt;
&lt;p&gt;2018年下半年中美贸易开战，裁员
      
    
    </summary>
    
    
    
      <category term="总结" scheme="https://opscoder.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计划" scheme="https://opscoder.com/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="2019" scheme="https://opscoder.com/tags/2019/"/>
    
      <category term="2020" scheme="https://opscoder.com/tags/2020/"/>
    
  </entry>
  
  <entry>
    <title>Different SSL Cert Format</title>
    <link href="https://opscoder.com/article/Different-SSL-Cert-Format/"/>
    <id>https://opscoder.com/article/Different-SSL-Cert-Format/</id>
    <published>2019-12-07T12:32:36.000Z</published>
    <updated>2019-12-07T12:57:29.809Z</updated>
    
    <content type="html"><![CDATA[<p>In the world of Public Key Infrastructure (PKI) there are many different file formats. The following are the major ones.</p><ul><li>x509/PEM</li><li>pkcs#7/P7B</li><li>pkcs#12/PFX/P12</li></ul><h4 id="x509pem-format">x509/PEM Format</h4><p>The PEM format is the most common format that <strong>Certificate Authorities (CA)</strong> issue certificates in. PEM certificates usually have extentions such as <strong>.pem, .crt, .cer, and .key</strong>. They are Base64 encoded ASCII files and contain “—–BEGIN CERTIFICATE—–” and “—–END CERTIFICATE—–” statements. Server certificates, intermediate certificates, and private keys can all be put into the PEM format. But Typically the private key will contain the following “—–BEGIN RSA PRIVATE KEY—–” and “—–END RSA PRIVATE KEY —–” Statements.</p><p>Apache and other similar servers use PEM format certificates. Several PEM certificates, and even the private key, can be included in one file with each individual certificate sandwiched on top of each other, one below the other, but most platforms, such as Apache, expect the certificates and private key to be in separate files.</p><h4 id="pkcs7p7b-format">PKCS#7/P7B Format</h4><p>The PKCS#7 or P7B format is usually stored in <strong>Base64</strong> encoded ASCII format and has a file extension of <strong>.p7b</strong> or <strong>.p7c. P7B</strong> certificates usually contain the following “—–BEGIN PKCS7—–” and “—–END PKCS7—–” statements as header and footers. A P7B file only contains certificates and chain certificates, not the private key. Several platforms support P7B files including <strong>Microsoft Windows</strong> and <strong>Java Tomcat</strong>.</p><h4 id="pkcs12pfx-format">PKCS#12/PFX Format</h4><p>The PKCS#12 or PFX format is a binary format for storing the server certificate, any intermediate certificates, and the private key in one encryptable file. PFX files usually have extensions such as .pfx and .p12. PFX files are typically used on Windows machines to import and export certificates and private keys.</p><h4 id="pkcs10-format">PKCS#10 Format</h4><p>The PKCS#10 is an actual <strong>certificate signing request</strong> (also <strong>CSR</strong> or <strong>certification request</strong>) This is a message sent from an applicant to a certificate authority in order to apply for a digital identity certificate. It usually contains the public key for which the certificate should be issued, identifying information (such as a domain/common name).</p><p><strong>The more you know:</strong> Before creating a CSR, the applicant first generates a key pair, keeping the private key secret during its creation. Once the CSR has been submitted to a certificate authority an SSL Certificate will be born/issued that will only work with the private key created during CSR keypair creation.</p><h4 id="der-format">DER Format</h4><p>The DER format is simply a binary form of a certificate instead of the ASCII PEM format. It sometimes has a file extension of <strong>.der</strong> but it often has a file extension of <strong>.cer</strong> so the only way to tell the difference between a DER .cer file and a PEM .cer file is to open it in a text editor you will see a bunch of hexadecimal gibberish. All types of certificates and private keys can be encoded in DER format but is very rarely used. DER is typically used with <strong>Java platforms</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the world of Public Key Infrastructure (PKI) there are many different file formats. The following are the major ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x50
      
    
    </summary>
    
    
    
      <category term="SSL" scheme="https://opscoder.com/tags/SSL/"/>
    
      <category term="Cert" scheme="https://opscoder.com/tags/Cert/"/>
    
      <category term="Format" scheme="https://opscoder.com/tags/Format/"/>
    
  </entry>
  
  <entry>
    <title>Think About Programming</title>
    <link href="https://opscoder.com/article/Think-About-Programming/"/>
    <id>https://opscoder.com/article/Think-About-Programming/</id>
    <published>2019-11-23T16:06:37.000Z</published>
    <updated>2019-11-24T09:09:59.608Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面向信仰编程">面向信仰编程</h4><p>去年18年首次接触Golang，第一感觉有点像C语言，<code>var</code>关键词咋又那么像JS，很不适应，简直是反人类设计，后面也就放到了一边。</p><p>今年年初遇上工作变动，从加班中解放出来，恰好有时间重温了Golang，对她<code>极简的语法</code>、<code>高效</code>、<code>畅快的编程体验</code> 欲罢不能，拜倒在她的石榴裙下，从此重新喜欢上编程。</p><blockquote><p>知之者不如好之者，好之者不如乐之者</p></blockquote><p>因为喜欢，感觉写写代码不再枯燥，也喜欢开始关注<code>算法</code>，<code>数学</code>和<code>系统底层原理</code>。目前尚在入门阶段，靠Go找一份工作还是不易。工作中能用Go的地方，尽量用Go，最近也写了几个小工具。作为爱好一直坚持下去，坚信随着时间积累，也可以做出更丰富的功能，甚至全职做开发。技术到位了，一切水到渠成，顺便把钱挣了。</p><p>亚马逊CTO每月都会编程一天，高盛都要求所有员工会写Python，连大佬潘石屹都开始学Python了。许多移民美帝的人，都选择去大学继续学习，<a href="https://www.1point3acres.com/bbs/" target="_blank" rel="noopener">一亩三分地</a>里面也经常看到讨论CS问题。<code>坚信编程是未来的必备技能</code>。</p><h4 id="产品化思维">产品化思维</h4><p>我做的是的产品，不是写程序。<br>N年前就听说张小龙他想做一个”软件“，不甘心做一个“千上万代码中若干行”的程序员。在大多数公司，一个软件产品被分割成若干功能，一个人往往只实现其中某一个功能。这对软件工程来说是一大进步，合适的人做合适的事。但对程序员来说，迟早会变成软件工程流水线上的一个螺丝钉。</p><p>只管写代码，不以产品为导向，那是实实在在的<code>“码畜”</code>。</p><p>最近在推上看到一篇文章<a href="https://blog.pixelixe.com/2019/09/19/how-a-facebook-rejection-pushed-me-to-start-and-grow-a-profitable-business-in-12-months/" target="_blank" rel="noopener">《Facebook的拒绝如何促使我在12个月内开始并发展盈利业务》</a>，读后感触颇多，<code>不愿做成千上万代码中的若干行</code>这句话又在脑海浮现。</p><h4 id="焦虑无意义">焦虑无意义</h4><p>35岁是程序员集体的焦虑，常见知乎、微信/QQ群口水战，“华为劝退35岁以上员工”，猎头截图“某公司HR说35岁以上的不考虑”…</p><p>这些不可否认，是实现也是事实。但也亲身经历上个公司成都研发中心解散，有个同事他已经40好几，找工作开始一连串碰壁，最后也在一个月内找到了工作。因为他的工作经历就是中国IT行业的发展史，九几年就参加工作，他做过Fortran、Delphi，中间貌似还有其他语言，直到Java，算是我见过最资深的程序员。计算机行业是一个非常浮躁的行业，尤其是互联网，加上<code>人口红利</code>和<code>低人权优势</code>，过度竞争导致996盛行，反过来也迫使公司偏向招年轻人。</p><p>试想一个场景：<br>80/90一代慢慢老去，人口红利消失，IT人才减少… 整个IT行业去哪里招那么多年轻人呢？新一代00/10后年轻人他们愿意从事IT麽？又愿意像现在加班麽？</p><p>在新加坡，年轻人选择IT的不多，名校毕业的他们更愿意去光鲜亮丽的投行、证券、保险业，收入不比IT差，几年前就听说同事的朋友的女儿在新加坡金融毕业就拿到8k新币，这是刚毕业的程序员望尘莫及的。在新加坡搞IT的在他们眼里都叫&quot;Engineering&quot;(工程)，跟修桥修路没啥差别，可见其社会地位。在制造业发达的日本，也是如此。</p><p>像<code>《未来简史》</code>里面说的那样，瘟疫被消灭（只剩下慢性病），人的寿命被延长，40/50岁还算年轻，相当于30岁。<code>大批程序员到了40/50岁他们就不吃饭了麽？</code>他们还是要工作，我相信<code>他们大多数还是要靠技术</code>。与其那样，何不提高技术？再者，对我而言，除了技术我又有其他啥资本呢？</p><h4 id="钢铁侠精神">钢铁侠精神</h4><p>脚本语言虽然可以解决遇到的大多数问题，但也容易懒惰，只为解决问题，不问为什么。我遇到的写编译类语言的普遍比写脚本类语言的更懂底层原理，解决问题能力也更强，知识面更广。要懂底层就必须会编译类语言，才会时不时的去关心算法和原理。国内国外大厂招聘都要求至少会一门编译语言和一门脚本语言。</p><p>计算机这个行业不断有新的东西涌现，需要保持好奇心，勇于尝试。不断问为什么，有自己的想法，尝试用程序来实现。并持续打磨，同时服务更多的人。</p><p>要像钢铁侠一样把自己想法，用软件来实现，并持续打磨成产品。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;面向信仰编程&quot;&gt;面向信仰编程&lt;/h4&gt;
&lt;p&gt;去年18年首次接触Golang，第一感觉有点像C语言，&lt;code&gt;var&lt;/code&gt;关键词咋又那么像JS，很不适应，简直是反人类设计，后面也就放到了一边。&lt;/p&gt;
&lt;p&gt;今年年初遇上工作变动，从加班中解放出来，恰好有
      
    
    </summary>
    
    
    
      <category term="思考" scheme="https://opscoder.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="面向信仰编程" scheme="https://opscoder.com/tags/%E9%9D%A2%E5%90%91%E4%BF%A1%E4%BB%B0%E7%BC%96%E7%A8%8B/"/>
    
      <category term="产品化思维" scheme="https://opscoder.com/tags/%E4%BA%A7%E5%93%81%E5%8C%96%E6%80%9D%E7%BB%B4/"/>
    
      <category term="钢铁侠精神" scheme="https://opscoder.com/tags/%E9%92%A2%E9%93%81%E4%BE%A0%E7%B2%BE%E7%A5%9E/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Go 学习资料收集</title>
    <link href="https://opscoder.com/article/Awesome-Go-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    <id>https://opscoder.com/article/Awesome-Go-学习资料收集/</id>
    <published>2019-11-23T04:27:09.000Z</published>
    <updated>2019-12-07T12:34:00.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="golang-学习资料">Golang 学习资料</h3><h4 id="书必读">书(必读)</h4><table><thead><tr><th>ID</th><th>英文名</th><th>中文名</th><th>电子版</th><th>纸质版</th></tr></thead><tbody><tr><td>1</td><td>The Go Programming Lanuage</td><td>《Go语言圣经》</td><td><a href="https://books.studygolang.com/gopl-zh/" target="_blank" rel="noopener">《Go语言圣经》</a></td><td><a href="https://item.jd.com/12187988.html?cu=true&amp;utm_source=kong&amp;utm_medium=tuiguang&amp;utm_campaign=t_1001542270_1001188671_0_1932339856&amp;utm_term=7f3fb3fe773d45fe92752a9e2c549943" target="_blank" rel="noopener">京东</a></td></tr><tr><td>2</td><td>Go In Action</td><td>《Go语言实战》</td><td><a href="/pdf/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98.pdf">Go语言实战.pdf</a></td><td><a href="https://item.jd.com/12136974.html?cu=true&amp;utm_source=kong&amp;utm_medium=tuiguang&amp;utm_campaign=t_1001542270_1001188671_0_1932339856&amp;utm_term=59a1a3c5c2ba4cc8aa9b97fa5fb163a1" target="_blank" rel="noopener">京东</a></td></tr></tbody></table><h4 id="go-web">Go Web</h4><p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="noopener">build-web-application-with-golang</a></p><p><a href="/pdf/go-web-programming.pdf">go-web-programming.pdf</a></p><h4 id="uber-go编码规范">Uber Go编码规范</h4><p><a href="https://github.com/uber-go/guide" target="_blank" rel="noopener">https://github.com/uber-go/guide</a><br><a href="https://github.com/xxjwxc/uber_go_guide_cn" target="_blank" rel="noopener">https://github.com/xxjwxc/uber_go_guide_cn</a></p><h4 id="go-学习资料与社区索引">Go 学习资料与社区索引</h4><p><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">https://github.com/Unknwon/go-study-index</a></p><h4 id="go-知识图谱">Go 知识图谱</h4><p><a href="https://www.processon.com/view/link/5a9ba4c8e4b0a9d22eb3bdf0#map" target="_blank" rel="noopener">https://www.processon.com/view/link/5a9ba4c8e4b0a9d22eb3bdf0#map</a></p><h4 id="博客">博客</h4><p><a href="https://www.zhihu.com/question/30461290" target="_blank" rel="noopener">https://www.zhihu.com/question/30461290</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;golang-学习资料&quot;&gt;Golang 学习资料&lt;/h3&gt;
&lt;h4 id=&quot;书必读&quot;&gt;书(必读)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;英文名&lt;/th&gt;
&lt;th&gt;中文名&lt;/th&gt;
&lt;th&gt;电子版&lt;/th&gt;
&lt;th&gt;纸质
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="https://opscoder.com/tags/Golang/"/>
    
      <category term="学习资料" scheme="https://opscoder.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>每日算法#3 leetcode#20 Valid Parentheses</title>
    <link href="https://opscoder.com/article/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-3-leetcode-20-Valid-Parentheses/"/>
    <id>https://opscoder.com/article/每日算法-3-leetcode-20-Valid-Parentheses/</id>
    <published>2019-11-13T23:33:15.000Z</published>
    <updated>2019-11-14T12:23:53.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="有效的括号">有效的括号</h3><p>Given a string containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 5:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h4 id="解题思路">解题思路</h4><p>开始我打算遍历字符串，最后发现根本不行，后参考了2个例子，用stack实现。</p><p><a href="https://www.cnblogs.com/TimLiuDream/p/9979158.html" target="_blank" rel="noopener">https://www.cnblogs.com/TimLiuDream/p/9979158.html</a> 这个例子比较简单，容易理清思路，但是每次要把rune转成string，有改进空间。</p><p><a href="https://studygolang.com/articles/15781" target="_blank" rel="noopener">https://studygolang.com/articles/15781</a> 最终参考了这个例子，算是比较优的解。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">strLen := <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">if</span> strLen == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strLen %<span class="number">2</span> !=<span class="number">0</span>&#123; <span class="comment">//奇数个括号肯定不是，必须要成对出现</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">brackets := <span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">rune</span>&#123; <span class="string">')'</span> : <span class="string">'('</span>, <span class="string">'&#125;'</span> : <span class="string">'&#123;'</span>, <span class="string">']'</span> : <span class="string">'['</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack []<span class="keyword">rune</span></span><br><span class="line"><span class="keyword">for</span> _,char:= <span class="keyword">range</span> s&#123;</span><br><span class="line"><span class="keyword">if</span> char ==brackets[<span class="string">')'</span>] || char == brackets[<span class="string">'&#125;'</span>] || char==brackets[<span class="string">']'</span>]&#123;</span><br><span class="line">stack=<span class="built_in">append</span>(stack,char)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt;<span class="number">0</span> &amp;&amp; brackets[char]==stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]&#123;</span><br><span class="line">stack=stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/depfish/leetcode/tree/master/easy" target="_blank" rel="noopener">leetcode完整代码</a></p><p>题目链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;有效的括号&quot;&gt;有效的括号&lt;/h3&gt;
&lt;p&gt;Given a string containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://opscoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://opscoder.com/tags/leetcode/"/>
    
      <category term="简单" scheme="https://opscoder.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>每日算法#2 leetcode#14 Longest Common Prefix</title>
    <link href="https://opscoder.com/article/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-2-leetcode-14-Longest-Common-Prefix/"/>
    <id>https://opscoder.com/article/每日算法-2-leetcode-14-Longest-Common-Prefix/</id>
    <published>2019-11-11T14:34:20.000Z</published>
    <updated>2019-11-14T12:23:50.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最长公共前缀">最长公共前缀</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br></pre></td></tr></table></figure><p>Explanation: There is no common prefix among the input strings.<br>Note:</p><p>All given inputs are in lowercase letters a-z.</p><p>我的解答：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//                0        1      2     3</span></span><br><span class="line"><span class="comment">//var strs = []string&#123;"flower", "flow", "flight"&#125;</span></span><br><span class="line"><span class="keyword">var</span> strs2 = [] <span class="keyword">string</span>&#123;<span class="string">""</span>,<span class="string">"a"</span>&#125;</span><br><span class="line"><span class="comment">//strs[0]="ggmm"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Printf("str is %v \n",strs)</span></span><br><span class="line">fmt.Println(longestCommonPrefix(strs2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["dog","racecar","car"]</span></span><br><span class="line"><span class="comment">// ["abab","aba",""]</span></span><br><span class="line"><span class="comment">// ["","b"]</span></span><br><span class="line"><span class="comment">//  ["aa","a"]</span></span><br><span class="line"><span class="comment">// ["aac","acab","aa","abba","aa"]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxIndex <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> n, str := <span class="keyword">range</span> strs &#123;</span><br><span class="line">strLen := <span class="built_in">len</span>(str)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>  &amp;&amp; strLen &gt; <span class="number">0</span>&#123;</span><br><span class="line">maxIndex = strLen - <span class="number">1</span></span><br><span class="line">result = str</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> strLen == <span class="number">0</span>  || (result[<span class="number">0</span>] != str[<span class="number">0</span>]) &#123;</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strLen <span class="number">-1</span> &lt; maxIndex &#123;</span><br><span class="line">maxIndex = strLen <span class="number">-1</span></span><br><span class="line">result = result[:strLen]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxIndex &amp;&amp; i &lt; strLen; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> result[i] != str[i] &#123;</span><br><span class="line">maxIndex=i <span class="number">-1</span></span><br><span class="line">result = result[:i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/article/Longest_Common_Prefix.jpeg" alt="mybook"></p><p>令人高兴的是，居然打败了100%的Gopher😂</p><p><a href="https://github.com/depfish/leetcode/tree/master/easy" target="_blank" rel="noopener">leetcode完整代码</a></p><p>题目链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最长公共前缀&quot;&gt;最长公共前缀&lt;/h3&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;p&gt;If there is no 
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://opscoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://opscoder.com/tags/leetcode/"/>
    
      <category term="简单" scheme="https://opscoder.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>每日算法#1 leetcode#13 Roman to Integer</title>
    <link href="https://opscoder.com/article/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-1-leetcode-13-Roman-to-Integer/"/>
    <id>https://opscoder.com/article/每日算法-1-leetcode-13-Roman-to-Integer/</id>
    <published>2019-11-09T16:46:18.000Z</published>
    <updated>2019-11-14T12:23:47.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="罗马数字转整型">罗马数字转整型</h3><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//IV</span></span><br><span class="line">fmt.Println(romanToInt(<span class="string">"XXVII"</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">mp[<span class="string">"I"</span>] = <span class="number">1</span></span><br><span class="line">mp[<span class="string">"V"</span>] = <span class="number">5</span></span><br><span class="line">mp[<span class="string">"X"</span>] = <span class="number">10</span></span><br><span class="line">mp[<span class="string">"L"</span>] = <span class="number">50</span></span><br><span class="line">mp[<span class="string">"C"</span>] = <span class="number">100</span></span><br><span class="line">mp[<span class="string">"D"</span>] = <span class="number">500</span></span><br><span class="line">mp[<span class="string">"M"</span>] = <span class="number">1000</span></span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">1</span> == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">sum += mp[<span class="keyword">string</span>(s[i])]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; mp[<span class="keyword">string</span>(s[i])] &gt;= mp[<span class="keyword">string</span>(s[i+<span class="number">1</span>])] &#123;</span><br><span class="line">sum += mp[<span class="keyword">string</span>(s[i])]</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum -= mp[<span class="keyword">string</span>(s[i])]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/depfish/leetcode/tree/master/easy" target="_blank" rel="noopener">leetcode完整代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;罗马数字转整型&quot;&gt;罗马数字转整型&lt;/h3&gt;
&lt;p&gt;Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://opscoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://opscoder.com/tags/leetcode/"/>
    
      <category term="简单" scheme="https://opscoder.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>demo后感想</title>
    <link href="https://opscoder.com/article/demo%E5%90%8E%E6%84%9F%E6%83%B3/"/>
    <id>https://opscoder.com/article/demo后感想/</id>
    <published>2019-10-31T07:28:41.000Z</published>
    <updated>2019-11-09T16:42:16.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="demo完成后第一感觉是赶紧在地下挖个洞钻进去">demo完成后第一感觉是赶紧在地下挖个洞钻进去</h3><p>这是在育碧的第一次在线对着30来号人用结结巴巴的英语讲，内心慌张，久久不能平静，感觉TMD太丢人啦。</p><p>丢人是丢人，反正咱丢人也习惯啦。丢人归丢人，这次发现了自己的问题。</p><ul><li>口头表达能力</li><li>英语</li></ul><p>听蚂蚁的同事说：”要无中生有，要把你的方案安利给团队，这就需要口头表达和PPT能力。“<br>看了<a href="https://www.bilibili.com/video/av41730152/" target="_blank" rel="noopener">新东方年会吐槽的视频</a>，感触也挺深，辛辛苦苦的功劳被别人一番PPT给抢走了。</p><p>混IT难免不遇到印度同事，印度人的文档算是我见过数一数二的，而我见过的中国人文档都是马马虎虎。而口头表达能力，中国人英语非母语，也是支支吾吾，比如说我自己。</p><p>混外企，口头表达能力和英语是必备，不然前方道路艰辛。</p><h3 id="反正不怕丢人何不试下">反正不怕丢人，何不试下</h3><p>这连两对我来说都是短板，是职业发展道路上的拦路虎。不解决掉永远是个小喽罗。</p><p>现在我重新思考油管Vlog博主，他们对着那么多人口头表达如此自然，有逻辑，简要又把问题描述清楚。<br>感觉这是个锻炼表达能力的一个不错的路子，我平时也可以尝试在油管上讲解下自己熟悉的东西，比如 翻墙工具，想法…</p><p>另外一个方式，就是平时多写博客，像<a href="http://xiaohanyu.me/" target="_blank" rel="noopener">xiaohanyu.me</a>一样，感觉写作挺锻炼思路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;demo完成后第一感觉是赶紧在地下挖个洞钻进去&quot;&gt;demo完成后第一感觉是赶紧在地下挖个洞钻进去&lt;/h3&gt;
&lt;p&gt;这是在育碧的第一次在线对着30来号人用结结巴巴的英语讲，内心慌张，久久不能平静，感觉TMD太丢人啦。&lt;/p&gt;
&lt;p&gt;丢人是丢人，反正咱丢人也习惯啦。丢
      
    
    </summary>
    
    
    
      <category term="感想" scheme="https://opscoder.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="demo" scheme="https://opscoder.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>istio概览</title>
    <link href="https://opscoder.com/article/istio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://opscoder.com/article/istio学习笔记/</id>
    <published>2019-09-23T05:57:46.000Z</published>
    <updated>2019-10-21T16:25:15.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="istio-6大组件及作用">istio 6大组件及作用</h2><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Envoy</td><td>Sidecar proxies per microservice to handle ingress/egress traffic</td></tr><tr><td>Mixer</td><td>核心组件,授权、限流</td></tr><tr><td>Pilot</td><td>configuring the proxies at runtime,负责配置proxy</td></tr><tr><td>Citadel</td><td>certificate issuance and rotation，管理证书</td></tr><tr><td>Citadel Agent</td><td>A per-node component responsible for certificate issuance and rotation</td></tr><tr><td>Galley</td><td>Central component for validating, ingesting, aggregating, transforming and distributing config within Istio</td></tr></tbody></table><h2 id="istio源码结构">istio源码结构</h2><p>可以参考官方 <a href="https://github.com/istio/istio" target="_blank" rel="noopener">https://github.com/istio/istio</a> 的 Introduction部分</p><table><thead><tr><th>仓库地址</th><th>语言</th><th>模块</th></tr></thead><tbody><tr><td><a href="https://github.com/istio/istio" target="_blank" rel="noopener">https://github.com/istio/istio</a></td><td>Go</td><td>istio的主要仓库,包括大部分组件: security目录(Citadel和citadel agent), pilot,istioctl, mixer, galley, sidecar-injector等</td></tr><tr><td><a href="https://github.com/istio/api" target="_blank" rel="noopener">https://github.com/istio/api</a></td><td>Go</td><td>包含istio组件之间的API 以及资源配置定义, 使用 protobuf 进行定义</td></tr><tr><td><a href="https://github.com/istio/proxy" target="_blank" rel="noopener">https://github.com/istio/proxy</a></td><td>C++</td><td>包含 istio 使用的sidecar代理, 这个sidecar代理包含envoy和mixer client两块功能</td></tr></tbody></table><p><a href="https://github.com/istio/istio" target="_blank" rel="noopener">https://github.com/istio/istio</a> 包含的主要的镜像和命令:</p><table><thead><tr><th>容器名</th><th>镜像名</th><th>启动命令</th><th>源码入口</th></tr></thead><tbody><tr><td>Istio_init</td><td>istio/proxy_init</td><td><a href="http://istio-iptables.sh" target="_blank" rel="noopener">istio-iptables.sh</a></td><td>istio/tools/deb/istio-iptables.sh</td></tr><tr><td>istio-proxy</td><td>istio/proxyv2</td><td>pilot-agent</td><td>istio/pilot/cmd/pilot-agent</td></tr><tr><td>sidecar-injector-webhook</td><td>istio/sidecar_injector</td><td>sidecar-injector</td><td>istio/pilot/cmd/sidecar-injector</td></tr><tr><td>discovery</td><td>istio/pilot</td><td>pilot-discovery</td><td>istio/pilot/cmd/pilot-discovery</td></tr><tr><td>galley</td><td>istio/galley</td><td>galley</td><td>istio/galley/cmd/galley</td></tr><tr><td>mixer</td><td>istio/mixer</td><td>mixs</td><td>istio/mixer/cmd/mixs</td></tr><tr><td>citadel</td><td>istio/citadel</td><td>istio_ca</td><td>istio/security/cmd/istio_ca</td></tr></tbody></table><h2 id="参考">参考</h2><p><a href="https://jimmysong.io/istio-handbook/concepts/istio-architecture.html" target="_blank" rel="noopener">https://jimmysong.io/istio-handbook/concepts/istio-architecture.html</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-istio-with-kubernetes" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-istio-with-kubernetes</a></p><p><a href="https://www.katacoda.com/courses/istio/deploy-istio-on-kubernetes,%22%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%22" target="_blank" rel="noopener">https://www.katacoda.com/courses/istio/deploy-istio-on-kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;istio-6大组件及作用&quot;&gt;istio 6大组件及作用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Envoy&lt;/td&gt;
&lt;td&gt;Sideca
      
    
    </summary>
    
    
    
      <category term="istio" scheme="https://opscoder.com/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>为什么要做开发</title>
    <link href="https://opscoder.com/article/2019-08-01-why-devops/"/>
    <id>https://opscoder.com/article/2019-08-01-why-devops/</id>
    <published>2019-08-01T02:51:24.000Z</published>
    <updated>2019-10-21T16:25:15.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不会开发的运维不是好运维">不会开发的运维不是好运维</h3><h4 id="现状">现状</h4><p>从2011毕业到目前2019年，转眼间都干了快9年运维了。这9年也从一个懵懂骚年变成了两个孩子的爸。在为政府做事的公司体验过什么叫等级森严，在新加坡公司体验过什么叫平等尊重，在北京某公司体验什么叫加班、什么叫政治，在育碧体验过什么叫大厂…这一路经历过很多事。</p><p>毕业就去了新加坡，当时想做一名Oracle DBA，经过2年左右的努力考取了OCP。后面puppet、chef、docker陆续出现，也让运维的工作发生了革命性的变化。意识到Oracle生态的封闭，当时又恰逢去IOE浪潮，决定放弃做Oracle DBA的职业规划，拥抱开源。k8s DevOPS 让运维与开发的界限变得更模糊，也对运维提出了更高的要求，不会开发的运维不是好运维。</p><h4 id="价值">价值</h4><p>如果事情没有价值，宁愿不干，也不去做<code>无用功</code>，<code>瞎忙活</code>。<br>父母在农村务农，常说种了水稻、玉米、红薯、果树，很忙很累很辛苦。我说“每年你存了多少钱呢”，每次妈都沉默。当然父母务农客观原因有很多，虽然每次我让她放弃，她还是停不下来，这里只讨论<code>价值</code>。而事实上，父母每年务农的收益，除去种子、农药、化肥和请人干活花的钱，最后为<code>负数</code>，更不说累了一身病又要花钱去医治，好了又去干活，简直就是个恶性循环。每年我都会拿钱给父母补贴家用，才勉强收支平衡。像我父母式的务农毫无意义，根本没什么<code>价值</code>。</p><p><code>岗位价值定薪酬</code>，看是相似岗位，其实价值也不同。有个亲戚C哥在京东做快递，几个月前就听说京东要削减快递的工资，周末听老婆说C哥工资没有被消减，我很惊讶，她说只是送快递的工资被降了，“C哥是收快递的，没被降工资”。顿时感叹：<code>同样是做快递的，送快递的工资被降，收快递的没事</code>。因为收快递的是挣钱的，送快递的是花钱的，是成本。这个事我联想到了，<code>运维</code>和<code>开发</code>，<code>护士</code>和<code>医生</code>，看似相似的岗位，价值不一样的显然待遇就不一样。在很多公司同一级别，开发工资比运维工资高些，运维拿的钱少可能更苦逼，而且开发更容易<code>升值</code>。想象一下，干10年开发和干10年运维的区别，开发更容易到创业公司做到leader、架构师之类的。现实就是很多公司还是传统运维，干的还是重复性劳动，这根我父母务农有啥差别呢，在这样的职位干个10年又有多大的提升呢。<br>所以，<code>战略选择</code>比<code>战术努力</code>更重要，选好大方向走下去，比整天忙碌却看不到价值重要。</p><h4 id="机遇挑战">机遇/挑战</h4><p>现在<code>云计算</code>也让运维火起来，就像现在的前端，变成了一个体系很全面复杂的技术栈。而运维也开始了细分领域<code>大数据运维</code>、<code>人工智能运维</code>、<code>云计算运维</code>、<code>DevOPS</code>，这些也对运维提出了更高的要求。而目前(敏捷)开发、运维(SRE/DevOPS)的界限越来越模糊，运维只是一个role而不是一个身份，我也见过一个博主之前是在百度做DevOPS的后面成了去了shopee做全栈开发。其实最重要一点，就是运维要会写代码，而且要有一定水准。好几年前腾讯招前端都是按照后端的标准进行招的，现在大厂亦然，招运维按照开发的标准来招，懂运维不用说，还要懂常见的<code>算法和数据结构</code>。</p><p>如果现在不加强开发技能，后面的路越来越不好走，如果现在专职做DevOPS，提升开发技能，后面也有望做全栈开发。现在Golang也刚开始被大众所接受，大家都在一条起跑线上，公司招Golang更愿意开高价。</p><p><code>DevOPS最好前后端都要会---全栈，一般公司很少会招了DevOPS再招专门的前端来配合DevOPS，小公司更不用说了。</code> 再者，DevOPS会全栈的话，路子更宽，很方便专成专职开发，或者升成leader。</p><h4 id="发展">发展</h4><p>现在我已经铁了心，提升开发技能，要有产出。<br>目前的公司Ubisoft属于外企，很自由，有时间做自己感兴趣的事，公司也很支持，有时间去发展。不管做开发还是DevOPS，都要有自己的作品，要有产品化的思维，不然只是成千上万代码中的若干行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;不会开发的运维不是好运维&quot;&gt;不会开发的运维不是好运维&lt;/h3&gt;
&lt;h4 id=&quot;现状&quot;&gt;现状&lt;/h4&gt;
&lt;p&gt;从2011毕业到目前2019年，转眼间都干了快9年运维了。这9年也从一个懵懂骚年变成了两个孩子的爸。在为政府做事的公司体验过什么叫等级森严，在新加坡公司体
      
    
    </summary>
    
    
    
      <category term="devops" scheme="https://opscoder.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>为啥用Markdown全静态站</title>
    <link href="https://opscoder.com/article/2019-07-26-helloworld/"/>
    <id>https://opscoder.com/article/2019-07-26-helloworld/</id>
    <published>2019-07-26T02:51:24.000Z</published>
    <updated>2019-10-21T16:25:15.876Z</updated>
    
    <content type="html"><![CDATA[<h4 id="新博客上线啦">新博客上线啦</h4><p>  之前一直用WP，虽然有不足之处但还可以接受，直到最近TG群里有盆友在用<code>ZeroNet</code>写博客。他在手机上也有客户端，相当于在手机上也有一份博客的镜像，写完然后同步。由于是分布式的，类似于比特币，除了他可以摧毁，其他任何人都无法破坏。后面有看了<code>IPFS 星际文件</code>，感觉还是不适合用来写博客之类的。</p><p>  直到想到Markdown全静态站 + github这一组合。既不怕删帖、也不怕毁坏，备份容易，省去了数据库/权限的麻烦。简直有种返璞归真的感觉。中途尝试了jekyll + 其他主题，直到尝试啦Hexo + 目前的主题，感觉到才是想要的，然后注册了新域名opscoder.com绑了上去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;新博客上线啦&quot;&gt;新博客上线啦&lt;/h4&gt;
&lt;p&gt;  之前一直用WP，虽然有不足之处但还可以接受，直到最近TG群里有盆友在用&lt;code&gt;ZeroNet&lt;/code&gt;写博客。他在手机上也有客户端，相当于在手机上也有一份博客的镜像，写完然后同步。由于是分布式的，类似于比特
      
    
    </summary>
    
    
    
      <category term="新博客上线啦" scheme="https://opscoder.com/tags/%E6%96%B0%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
    
  </entry>
  
</feed>
