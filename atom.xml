<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>opscoder</title>
  <icon>https://www.gravatar.com/avatar/ba4a4c9ed2a98e1ba0d030ca3449d4a5</icon>
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://opscoder.com/"/>
  <updated>2019-12-07T12:54:27.079Z</updated>
  <id>https://opscoder.com/</id>
  
  <author>
    <name>Murphy</name>
    <email>e-mail_address</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Different SSL Cert Format</title>
    <link href="https://opscoder.com/article/Different-SSL-Cert-Format/"/>
    <id>https://opscoder.com/article/Different-SSL-Cert-Format/</id>
    <published>2019-12-07T12:32:36.000Z</published>
    <updated>2019-12-07T12:54:27.079Z</updated>
    
    <content type="html"><![CDATA[<p>In the world of Public Key Infrastructure (PKI) there are many different file formats. The following are the major ones.</p><ul><li>x509/PEM</li><li>pkcs#7/P7B</li><li>pkcs#12/PFX/P12</li></ul><h4 id="x509pem-format">x509/PEM Format</h4><p>The PEM format is the most common format that <strong>Certificate Authorities (CA)</strong> issue certificates in. PEM certificates usually have extentions such as <strong>.pem, .crt, .cer, and .key</strong>. They are Base64 encoded ASCII files and contain “—–BEGIN CERTIFICATE—–” and “—–END CERTIFICATE—–” statements. Server certificates, intermediate certificates, and private keys can all be put into the PEM format. But Typically the private key will contain the following “—–BEGIN RSA PRIVATE KEY—–” and “—–END RSA PRIVATE KEY —–” Statements.</p><p>Apache and other similar servers use PEM format certificates. Several PEM certificates, and even the private key, can be included in one file with each individual certificate sandwiched on top of each other, one below the other, but most platforms, such as Apache, expect the certificates and private key to be in separate files.</p><h4 id="pkcs7p7b-format">PKCS#7/P7B Format</h4><p>The PKCS#7 or P7B format is usually stored in <strong>Base64</strong> encoded ASCII format and has a file extension of <strong>.p7b</strong> or <strong>.p7c. P7B</strong> certificates usually contain the following “—–BEGIN PKCS7—–” and “—–END PKCS7—–” statements as header and footers. A P7B file only contains certificates and chain certificates, not the private key. Several platforms support P7B files including <strong>Microsoft Windows</strong> and <strong>Java Tomcat</strong>.</p><h4 id="pkcs12pfx-format">PKCS#12/PFX Format</h4><p>The PKCS#12 or PFX format is a binary format for storing the server certificate, any intermediate certificates, and the private key in one encryptable file. PFX files usually have extensions such as .pfx and .p12. PFX files are typically used on Windows machines to import and export certificates and private keys.</p><h4 id="pkcs10-format">PKCS#10 Format</h4><p>The PKCS#10 is an actual <strong>certificate signing request</strong> (also <strong>CSR</strong> or <strong>certification request</strong>) This is a message sent from an applicant to a certificate authority in order to apply for a digital identity certificate. It usually contains the public key for which the certificate should be issued, identifying information (such as a domain/common name).</p><p><strong>The more you know:</strong> Before creating a CSR, the applicant first generates a key pair, keeping the private key secret during its creation. Once the CSR has been submitted to a certificate authority an SSL Certificate will be born/issued that will only work with the private key created during CSR keypair creation.</p><h4 id="der-format">DER Format</h4><p>The DER format is simply a binary form of a certificate instead of the ASCII PEM format. It sometimes has a file extension of <strong>.der</strong> but it often has a file extension of <strong>.cer</strong> so the only way to tell the difference between a DER .cer file and a PEM .cer file is to open it in a text editor you will see a bunch of hexadecimal gibberish. All types of certificates and private keys can be encoded in DER format but is very rarely used. DER is typically used with <strong>Java platforms</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the world of Public Key Infrastructure (PKI) there are many different file formats. The following are the major ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x50
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Think About Programming</title>
    <link href="https://opscoder.com/article/Think-About-Programming/"/>
    <id>https://opscoder.com/article/Think-About-Programming/</id>
    <published>2019-11-23T16:06:37.000Z</published>
    <updated>2019-11-24T09:09:59.608Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面向信仰编程">面向信仰编程</h4><p>去年18年首次接触Golang，第一感觉有点像C语言，<code>var</code>关键词咋又那么像JS，很不适应，简直是反人类设计，后面也就放到了一边。</p><p>今年年初遇上工作变动，从加班中解放出来，恰好有时间重温了Golang，对她<code>极简的语法</code>、<code>高效</code>、<code>畅快的编程体验</code> 欲罢不能，拜倒在她的石榴裙下，从此重新喜欢上编程。</p><blockquote><p>知之者不如好之者，好之者不如乐之者</p></blockquote><p>因为喜欢，感觉写写代码不再枯燥，也喜欢开始关注<code>算法</code>，<code>数学</code>和<code>系统底层原理</code>。目前尚在入门阶段，靠Go找一份工作还是不易。工作中能用Go的地方，尽量用Go，最近也写了几个小工具。作为爱好一直坚持下去，坚信随着时间积累，也可以做出更丰富的功能，甚至全职做开发。技术到位了，一切水到渠成，顺便把钱挣了。</p><p>亚马逊CTO每月都会编程一天，高盛都要求所有员工会写Python，连大佬潘石屹都开始学Python了。许多移民美帝的人，都选择去大学继续学习，<a href="https://www.1point3acres.com/bbs/" target="_blank" rel="noopener">一亩三分地</a>里面也经常看到讨论CS问题。<code>坚信编程是未来的必备技能</code>。</p><h4 id="产品化思维">产品化思维</h4><p>我做的是的产品，不是写程序。<br>N年前就听说张小龙他想做一个”软件“，不甘心做一个“千上万代码中若干行”的程序员。在大多数公司，一个软件产品被分割成若干功能，一个人往往只实现其中某一个功能。这对软件工程来说是一大进步，合适的人做合适的事。但对程序员来说，迟早会变成软件工程流水线上的一个螺丝钉。</p><p>只管写代码，不以产品为导向，那是实实在在的<code>“码畜”</code>。</p><p>最近在推上看到一篇文章<a href="https://blog.pixelixe.com/2019/09/19/how-a-facebook-rejection-pushed-me-to-start-and-grow-a-profitable-business-in-12-months/" target="_blank" rel="noopener">《Facebook的拒绝如何促使我在12个月内开始并发展盈利业务》</a>，读后感触颇多，<code>不愿做成千上万代码中的若干行</code>这句话又在脑海浮现。</p><h4 id="焦虑无意义">焦虑无意义</h4><p>35岁是程序员集体的焦虑，常见知乎、微信/QQ群口水战，“华为劝退35岁以上员工”，猎头截图“某公司HR说35岁以上的不考虑”…</p><p>这些不可否认，是实现也是事实。但也亲身经历上个公司成都研发中心解散，有个同事他已经40好几，找工作开始一连串碰壁，最后也在一个月内找到了工作。因为他的工作经历就是中国IT行业的发展史，九几年就参加工作，他做过Fortran、Delphi，中间貌似还有其他语言，直到Java，算是我见过最资深的程序员。计算机行业是一个非常浮躁的行业，尤其是互联网，加上<code>人口红利</code>和<code>低人权优势</code>，过度竞争导致996盛行，反过来也迫使公司偏向招年轻人。</p><p>试想一个场景：<br>80/90一代慢慢老去，人口红利消失，IT人才减少… 整个IT行业去哪里招那么多年轻人呢？新一代00/10后年轻人他们愿意从事IT麽？又愿意像现在加班麽？</p><p>在新加坡，年轻人选择IT的不多，名校毕业的他们更愿意去光鲜亮丽的投行、证券、保险业，收入不比IT差，几年前就听说同事的朋友的女儿在新加坡金融毕业就拿到8k新币，这是刚毕业的程序员望尘莫及的。在新加坡搞IT的在他们眼里都叫&quot;Engineering&quot;(工程)，跟修桥修路没啥差别，可见其社会地位。在制造业发达的日本，也是如此。</p><p>像<code>《未来简史》</code>里面说的那样，瘟疫被消灭（只剩下慢性病），人的寿命被延长，40/50岁还算年轻，相当于30岁。<code>大批程序员到了40/50岁他们就不吃饭了麽？</code>他们还是要工作，我相信<code>他们大多数还是要靠技术</code>。与其那样，何不提高技术？再者，对我而言，除了技术我又有其他啥资本呢？</p><h4 id="钢铁侠精神">钢铁侠精神</h4><p>脚本语言虽然可以解决遇到的大多数问题，但也容易懒惰，只为解决问题，不问为什么。我遇到的写编译类语言的普遍比写脚本类语言的更懂底层原理，解决问题能力也更强，知识面更广。要懂底层就必须会编译类语言，才会时不时的去关心算法和原理。国内国外大厂招聘都要求至少会一门编译语言和一门脚本语言。</p><p>计算机这个行业不断有新的东西涌现，需要保持好奇心，勇于尝试。不断问为什么，有自己的想法，尝试用程序来实现。并持续打磨，同时服务更多的人。</p><p>要像钢铁侠一样把自己想法，用软件来实现，并持续打磨成产品。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;面向信仰编程&quot;&gt;面向信仰编程&lt;/h4&gt;
&lt;p&gt;去年18年首次接触Golang，第一感觉有点像C语言，&lt;code&gt;var&lt;/code&gt;关键词咋又那么像JS，很不适应，简直是反人类设计，后面也就放到了一边。&lt;/p&gt;
&lt;p&gt;今年年初遇上工作变动，从加班中解放出来，恰好有
      
    
    </summary>
    
    
    
      <category term="思考" scheme="https://opscoder.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="面向信仰编程" scheme="https://opscoder.com/tags/%E9%9D%A2%E5%90%91%E4%BF%A1%E4%BB%B0%E7%BC%96%E7%A8%8B/"/>
    
      <category term="产品化思维" scheme="https://opscoder.com/tags/%E4%BA%A7%E5%93%81%E5%8C%96%E6%80%9D%E7%BB%B4/"/>
    
      <category term="钢铁侠精神" scheme="https://opscoder.com/tags/%E9%92%A2%E9%93%81%E4%BE%A0%E7%B2%BE%E7%A5%9E/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Go 学习资料收集</title>
    <link href="https://opscoder.com/article/Awesome-Go-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    <id>https://opscoder.com/article/Awesome-Go-学习资料收集/</id>
    <published>2019-11-23T04:27:09.000Z</published>
    <updated>2019-12-07T12:34:00.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="golang-学习资料">Golang 学习资料</h3><h4 id="书必读">书(必读)</h4><table><thead><tr><th>ID</th><th>英文名</th><th>中文名</th><th>电子版</th><th>纸质版</th></tr></thead><tbody><tr><td>1</td><td>The Go Programming Lanuage</td><td>《Go语言圣经》</td><td><a href="https://books.studygolang.com/gopl-zh/" target="_blank" rel="noopener">《Go语言圣经》</a></td><td><a href="https://item.jd.com/12187988.html?cu=true&amp;utm_source=kong&amp;utm_medium=tuiguang&amp;utm_campaign=t_1001542270_1001188671_0_1932339856&amp;utm_term=7f3fb3fe773d45fe92752a9e2c549943" target="_blank" rel="noopener">京东</a></td></tr><tr><td>2</td><td>Go In Action</td><td>《Go语言实战》</td><td><a href="/pdf/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98.pdf">Go语言实战.pdf</a></td><td><a href="https://item.jd.com/12136974.html?cu=true&amp;utm_source=kong&amp;utm_medium=tuiguang&amp;utm_campaign=t_1001542270_1001188671_0_1932339856&amp;utm_term=59a1a3c5c2ba4cc8aa9b97fa5fb163a1" target="_blank" rel="noopener">京东</a></td></tr></tbody></table><h4 id="go-web">Go Web</h4><p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="noopener">build-web-application-with-golang</a></p><p><a href="/pdf/go-web-programming.pdf">go-web-programming.pdf</a></p><h4 id="uber-go编码规范">Uber Go编码规范</h4><p><a href="https://github.com/uber-go/guide" target="_blank" rel="noopener">https://github.com/uber-go/guide</a><br><a href="https://github.com/xxjwxc/uber_go_guide_cn" target="_blank" rel="noopener">https://github.com/xxjwxc/uber_go_guide_cn</a></p><h4 id="go-学习资料与社区索引">Go 学习资料与社区索引</h4><p><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">https://github.com/Unknwon/go-study-index</a></p><h4 id="go-知识图谱">Go 知识图谱</h4><p><a href="https://www.processon.com/view/link/5a9ba4c8e4b0a9d22eb3bdf0#map" target="_blank" rel="noopener">https://www.processon.com/view/link/5a9ba4c8e4b0a9d22eb3bdf0#map</a></p><h4 id="博客">博客</h4><p><a href="https://www.zhihu.com/question/30461290" target="_blank" rel="noopener">https://www.zhihu.com/question/30461290</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;golang-学习资料&quot;&gt;Golang 学习资料&lt;/h3&gt;
&lt;h4 id=&quot;书必读&quot;&gt;书(必读)&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;英文名&lt;/th&gt;
&lt;th&gt;中文名&lt;/th&gt;
&lt;th&gt;电子版&lt;/th&gt;
&lt;th&gt;纸质
      
    
    </summary>
    
    
    
      <category term="Golang" scheme="https://opscoder.com/tags/Golang/"/>
    
      <category term="学习资料" scheme="https://opscoder.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>每日算法#3 leetcode#20 Valid Parentheses</title>
    <link href="https://opscoder.com/article/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-3-leetcode-20-Valid-Parentheses/"/>
    <id>https://opscoder.com/article/每日算法-3-leetcode-20-Valid-Parentheses/</id>
    <published>2019-11-13T23:33:15.000Z</published>
    <updated>2019-11-14T12:23:53.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="有效的括号">有效的括号</h3><p>Given a string containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 5:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h4 id="解题思路">解题思路</h4><p>开始我打算遍历字符串，最后发现根本不行，后参考了2个例子，用stack实现。</p><p><a href="https://www.cnblogs.com/TimLiuDream/p/9979158.html" target="_blank" rel="noopener">https://www.cnblogs.com/TimLiuDream/p/9979158.html</a> 这个例子比较简单，容易理清思路，但是每次要把rune转成string，有改进空间。</p><p><a href="https://studygolang.com/articles/15781" target="_blank" rel="noopener">https://studygolang.com/articles/15781</a> 最终参考了这个例子，算是比较优的解。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">strLen := <span class="built_in">len</span>(s)</span><br><span class="line"><span class="keyword">if</span> strLen == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strLen %<span class="number">2</span> !=<span class="number">0</span>&#123; <span class="comment">//奇数个括号肯定不是，必须要成对出现</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">brackets := <span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">rune</span>&#123; <span class="string">')'</span> : <span class="string">'('</span>, <span class="string">'&#125;'</span> : <span class="string">'&#123;'</span>, <span class="string">']'</span> : <span class="string">'['</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack []<span class="keyword">rune</span></span><br><span class="line"><span class="keyword">for</span> _,char:= <span class="keyword">range</span> s&#123;</span><br><span class="line"><span class="keyword">if</span> char ==brackets[<span class="string">')'</span>] || char == brackets[<span class="string">'&#125;'</span>] || char==brackets[<span class="string">']'</span>]&#123;</span><br><span class="line">stack=<span class="built_in">append</span>(stack,char)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt;<span class="number">0</span> &amp;&amp; brackets[char]==stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]&#123;</span><br><span class="line">stack=stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/depfish/leetcode/tree/master/easy" target="_blank" rel="noopener">leetcode完整代码</a></p><p>题目链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;有效的括号&quot;&gt;有效的括号&lt;/h3&gt;
&lt;p&gt;Given a string containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://opscoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://opscoder.com/tags/leetcode/"/>
    
      <category term="简单" scheme="https://opscoder.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>每日算法#2 leetcode#14 Longest Common Prefix</title>
    <link href="https://opscoder.com/article/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-2-leetcode-14-Longest-Common-Prefix/"/>
    <id>https://opscoder.com/article/每日算法-2-leetcode-14-Longest-Common-Prefix/</id>
    <published>2019-11-11T14:34:20.000Z</published>
    <updated>2019-11-14T12:23:50.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最长公共前缀">最长公共前缀</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br></pre></td></tr></table></figure><p>Explanation: There is no common prefix among the input strings.<br>Note:</p><p>All given inputs are in lowercase letters a-z.</p><p>我的解答：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//                0        1      2     3</span></span><br><span class="line"><span class="comment">//var strs = []string&#123;"flower", "flow", "flight"&#125;</span></span><br><span class="line"><span class="keyword">var</span> strs2 = [] <span class="keyword">string</span>&#123;<span class="string">""</span>,<span class="string">"a"</span>&#125;</span><br><span class="line"><span class="comment">//strs[0]="ggmm"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Printf("str is %v \n",strs)</span></span><br><span class="line">fmt.Println(longestCommonPrefix(strs2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["dog","racecar","car"]</span></span><br><span class="line"><span class="comment">// ["abab","aba",""]</span></span><br><span class="line"><span class="comment">// ["","b"]</span></span><br><span class="line"><span class="comment">//  ["aa","a"]</span></span><br><span class="line"><span class="comment">// ["aac","acab","aa","abba","aa"]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxIndex <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> n, str := <span class="keyword">range</span> strs &#123;</span><br><span class="line">strLen := <span class="built_in">len</span>(str)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>  &amp;&amp; strLen &gt; <span class="number">0</span>&#123;</span><br><span class="line">maxIndex = strLen - <span class="number">1</span></span><br><span class="line">result = str</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> strLen == <span class="number">0</span>  || (result[<span class="number">0</span>] != str[<span class="number">0</span>]) &#123;</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strLen <span class="number">-1</span> &lt; maxIndex &#123;</span><br><span class="line">maxIndex = strLen <span class="number">-1</span></span><br><span class="line">result = result[:strLen]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxIndex &amp;&amp; i &lt; strLen; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> result[i] != str[i] &#123;</span><br><span class="line">maxIndex=i <span class="number">-1</span></span><br><span class="line">result = result[:i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/article/Longest_Common_Prefix.jpeg" alt="mybook"></p><p>令人高兴的是，居然打败了100%的Gopher😂</p><p><a href="https://github.com/depfish/leetcode/tree/master/easy" target="_blank" rel="noopener">leetcode完整代码</a></p><p>题目链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最长公共前缀&quot;&gt;最长公共前缀&lt;/h3&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;p&gt;If there is no 
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://opscoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://opscoder.com/tags/leetcode/"/>
    
      <category term="简单" scheme="https://opscoder.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>每日算法#1 leetcode#13 Roman to Integer</title>
    <link href="https://opscoder.com/article/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-1-leetcode-13-Roman-to-Integer/"/>
    <id>https://opscoder.com/article/每日算法-1-leetcode-13-Roman-to-Integer/</id>
    <published>2019-11-09T16:46:18.000Z</published>
    <updated>2019-11-14T12:23:47.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="罗马数字转整型">罗马数字转整型</h3><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//IV</span></span><br><span class="line">fmt.Println(romanToInt(<span class="string">"XXVII"</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">mp[<span class="string">"I"</span>] = <span class="number">1</span></span><br><span class="line">mp[<span class="string">"V"</span>] = <span class="number">5</span></span><br><span class="line">mp[<span class="string">"X"</span>] = <span class="number">10</span></span><br><span class="line">mp[<span class="string">"L"</span>] = <span class="number">50</span></span><br><span class="line">mp[<span class="string">"C"</span>] = <span class="number">100</span></span><br><span class="line">mp[<span class="string">"D"</span>] = <span class="number">500</span></span><br><span class="line">mp[<span class="string">"M"</span>] = <span class="number">1000</span></span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">1</span> == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">sum += mp[<span class="keyword">string</span>(s[i])]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i+<span class="number">1</span> &lt; <span class="built_in">len</span>(s) &amp;&amp; mp[<span class="keyword">string</span>(s[i])] &gt;= mp[<span class="keyword">string</span>(s[i+<span class="number">1</span>])] &#123;</span><br><span class="line">sum += mp[<span class="keyword">string</span>(s[i])]</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum -= mp[<span class="keyword">string</span>(s[i])]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/depfish/leetcode/tree/master/easy" target="_blank" rel="noopener">leetcode完整代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;罗马数字转整型&quot;&gt;罗马数字转整型&lt;/h3&gt;
&lt;p&gt;Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://opscoder.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://opscoder.com/tags/leetcode/"/>
    
      <category term="简单" scheme="https://opscoder.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>demo后感想</title>
    <link href="https://opscoder.com/article/demo%E5%90%8E%E6%84%9F%E6%83%B3/"/>
    <id>https://opscoder.com/article/demo后感想/</id>
    <published>2019-10-31T07:28:41.000Z</published>
    <updated>2019-11-09T16:42:16.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="demo完成后第一感觉是赶紧在地下挖个洞钻进去">demo完成后第一感觉是赶紧在地下挖个洞钻进去</h3><p>这是在育碧的第一次在线对着30来号人用结结巴巴的英语讲，内心慌张，久久不能平静，感觉TMD太丢人啦。</p><p>丢人是丢人，反正咱丢人也习惯啦。丢人归丢人，这次发现了自己的问题。</p><ul><li>口头表达能力</li><li>英语</li></ul><p>听蚂蚁的同事说：”要无中生有，要把你的方案安利给团队，这就需要口头表达和PPT能力。“<br>看了<a href="https://www.bilibili.com/video/av41730152/" target="_blank" rel="noopener">新东方年会吐槽的视频</a>，感触也挺深，辛辛苦苦的功劳被别人一番PPT给抢走了。</p><p>混IT难免不遇到印度同事，印度人的文档算是我见过数一数二的，而我见过的中国人文档都是马马虎虎。而口头表达能力，中国人英语非母语，也是支支吾吾，比如说我自己。</p><p>混外企，口头表达能力和英语是必备，不然前方道路艰辛。</p><h3 id="反正不怕丢人何不试下">反正不怕丢人，何不试下</h3><p>这连两对我来说都是短板，是职业发展道路上的拦路虎。不解决掉永远是个小喽罗。</p><p>现在我重新思考油管Vlog博主，他们对着那么多人口头表达如此自然，有逻辑，简要又把问题描述清楚。<br>感觉这是个锻炼表达能力的一个不错的路子，我平时也可以尝试在油管上讲解下自己熟悉的东西，比如 翻墙工具，想法…</p><p>另外一个方式，就是平时多写博客，像<a href="http://xiaohanyu.me/" target="_blank" rel="noopener">xiaohanyu.me</a>一样，感觉写作挺锻炼思路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;demo完成后第一感觉是赶紧在地下挖个洞钻进去&quot;&gt;demo完成后第一感觉是赶紧在地下挖个洞钻进去&lt;/h3&gt;
&lt;p&gt;这是在育碧的第一次在线对着30来号人用结结巴巴的英语讲，内心慌张，久久不能平静，感觉TMD太丢人啦。&lt;/p&gt;
&lt;p&gt;丢人是丢人，反正咱丢人也习惯啦。丢
      
    
    </summary>
    
    
    
      <category term="感想" scheme="https://opscoder.com/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="demo" scheme="https://opscoder.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>istio概览</title>
    <link href="https://opscoder.com/article/istio%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://opscoder.com/article/istio学习笔记/</id>
    <published>2019-09-23T05:57:46.000Z</published>
    <updated>2019-10-21T16:25:15.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="istio-6大组件及作用">istio 6大组件及作用</h2><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Envoy</td><td>Sidecar proxies per microservice to handle ingress/egress traffic</td></tr><tr><td>Mixer</td><td>核心组件,授权、限流</td></tr><tr><td>Pilot</td><td>configuring the proxies at runtime,负责配置proxy</td></tr><tr><td>Citadel</td><td>certificate issuance and rotation，管理证书</td></tr><tr><td>Citadel Agent</td><td>A per-node component responsible for certificate issuance and rotation</td></tr><tr><td>Galley</td><td>Central component for validating, ingesting, aggregating, transforming and distributing config within Istio</td></tr></tbody></table><h2 id="istio源码结构">istio源码结构</h2><p>可以参考官方 <a href="https://github.com/istio/istio" target="_blank" rel="noopener">https://github.com/istio/istio</a> 的 Introduction部分</p><table><thead><tr><th>仓库地址</th><th>语言</th><th>模块</th></tr></thead><tbody><tr><td><a href="https://github.com/istio/istio" target="_blank" rel="noopener">https://github.com/istio/istio</a></td><td>Go</td><td>istio的主要仓库,包括大部分组件: security目录(Citadel和citadel agent), pilot,istioctl, mixer, galley, sidecar-injector等</td></tr><tr><td><a href="https://github.com/istio/api" target="_blank" rel="noopener">https://github.com/istio/api</a></td><td>Go</td><td>包含istio组件之间的API 以及资源配置定义, 使用 protobuf 进行定义</td></tr><tr><td><a href="https://github.com/istio/proxy" target="_blank" rel="noopener">https://github.com/istio/proxy</a></td><td>C++</td><td>包含 istio 使用的sidecar代理, 这个sidecar代理包含envoy和mixer client两块功能</td></tr></tbody></table><p><a href="https://github.com/istio/istio" target="_blank" rel="noopener">https://github.com/istio/istio</a> 包含的主要的镜像和命令:</p><table><thead><tr><th>容器名</th><th>镜像名</th><th>启动命令</th><th>源码入口</th></tr></thead><tbody><tr><td>Istio_init</td><td>istio/proxy_init</td><td><a href="http://istio-iptables.sh" target="_blank" rel="noopener">istio-iptables.sh</a></td><td>istio/tools/deb/istio-iptables.sh</td></tr><tr><td>istio-proxy</td><td>istio/proxyv2</td><td>pilot-agent</td><td>istio/pilot/cmd/pilot-agent</td></tr><tr><td>sidecar-injector-webhook</td><td>istio/sidecar_injector</td><td>sidecar-injector</td><td>istio/pilot/cmd/sidecar-injector</td></tr><tr><td>discovery</td><td>istio/pilot</td><td>pilot-discovery</td><td>istio/pilot/cmd/pilot-discovery</td></tr><tr><td>galley</td><td>istio/galley</td><td>galley</td><td>istio/galley/cmd/galley</td></tr><tr><td>mixer</td><td>istio/mixer</td><td>mixs</td><td>istio/mixer/cmd/mixs</td></tr><tr><td>citadel</td><td>istio/citadel</td><td>istio_ca</td><td>istio/security/cmd/istio_ca</td></tr></tbody></table><h2 id="参考">参考</h2><p><a href="https://jimmysong.io/istio-handbook/concepts/istio-architecture.html" target="_blank" rel="noopener">https://jimmysong.io/istio-handbook/concepts/istio-architecture.html</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-istio-with-kubernetes" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-istio-with-kubernetes</a></p><p><a href="https://www.katacoda.com/courses/istio/deploy-istio-on-kubernetes,%22%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%22" target="_blank" rel="noopener">https://www.katacoda.com/courses/istio/deploy-istio-on-kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;istio-6大组件及作用&quot;&gt;istio 6大组件及作用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Envoy&lt;/td&gt;
&lt;td&gt;Sideca
      
    
    </summary>
    
    
    
      <category term="istio" scheme="https://opscoder.com/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>为什么要做开发</title>
    <link href="https://opscoder.com/article/2019-08-01-why-devops/"/>
    <id>https://opscoder.com/article/2019-08-01-why-devops/</id>
    <published>2019-08-01T02:51:24.000Z</published>
    <updated>2019-10-21T16:25:15.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不会开发的运维不是好运维">不会开发的运维不是好运维</h3><h4 id="现状">现状</h4><p>从2011毕业到目前2019年，转眼间都干了快9年运维了。这9年也从一个懵懂骚年变成了两个孩子的爸。在为政府做事的公司体验过什么叫等级森严，在新加坡公司体验过什么叫平等尊重，在北京某公司体验什么叫加班、什么叫政治，在育碧体验过什么叫大厂…这一路经历过很多事。</p><p>毕业就去了新加坡，当时想做一名Oracle DBA，经过2年左右的努力考取了OCP。后面puppet、chef、docker陆续出现，也让运维的工作发生了革命性的变化。意识到Oracle生态的封闭，当时又恰逢去IOE浪潮，决定放弃做Oracle DBA的职业规划，拥抱开源。k8s DevOPS 让运维与开发的界限变得更模糊，也对运维提出了更高的要求，不会开发的运维不是好运维。</p><h4 id="价值">价值</h4><p>如果事情没有价值，宁愿不干，也不去做<code>无用功</code>，<code>瞎忙活</code>。<br>父母在农村务农，常说种了水稻、玉米、红薯、果树，很忙很累很辛苦。我说“每年你存了多少钱呢”，每次妈都沉默。当然父母务农客观原因有很多，虽然每次我让她放弃，她还是停不下来，这里只讨论<code>价值</code>。而事实上，父母每年务农的收益，除去种子、农药、化肥和请人干活花的钱，最后为<code>负数</code>，更不说累了一身病又要花钱去医治，好了又去干活，简直就是个恶性循环。每年我都会拿钱给父母补贴家用，才勉强收支平衡。像我父母式的务农毫无意义，根本没什么<code>价值</code>。</p><p><code>岗位价值定薪酬</code>，看是相似岗位，其实价值也不同。有个亲戚C哥在京东做快递，几个月前就听说京东要削减快递的工资，周末听老婆说C哥工资没有被消减，我很惊讶，她说只是送快递的工资被降了，“C哥是收快递的，没被降工资”。顿时感叹：<code>同样是做快递的，送快递的工资被降，收快递的没事</code>。因为收快递的是挣钱的，送快递的是花钱的，是成本。这个事我联想到了，<code>运维</code>和<code>开发</code>，<code>护士</code>和<code>医生</code>，看似相似的岗位，价值不一样的显然待遇就不一样。在很多公司同一级别，开发工资比运维工资高些，运维拿的钱少可能更苦逼，而且开发更容易<code>升值</code>。想象一下，干10年开发和干10年运维的区别，开发更容易到创业公司做到leader、架构师之类的。现实就是很多公司还是传统运维，干的还是重复性劳动，这根我父母务农有啥差别呢，在这样的职位干个10年又有多大的提升呢。<br>所以，<code>战略选择</code>比<code>战术努力</code>更重要，选好大方向走下去，比整天忙碌却看不到价值重要。</p><h4 id="机遇挑战">机遇/挑战</h4><p>现在<code>云计算</code>也让运维火起来，就像现在的前端，变成了一个体系很全面复杂的技术栈。而运维也开始了细分领域<code>大数据运维</code>、<code>人工智能运维</code>、<code>云计算运维</code>、<code>DevOPS</code>，这些也对运维提出了更高的要求。而目前(敏捷)开发、运维(SRE/DevOPS)的界限越来越模糊，运维只是一个role而不是一个身份，我也见过一个博主之前是在百度做DevOPS的后面成了去了shopee做全栈开发。其实最重要一点，就是运维要会写代码，而且要有一定水准。好几年前腾讯招前端都是按照后端的标准进行招的，现在大厂亦然，招运维按照开发的标准来招，懂运维不用说，还要懂常见的<code>算法和数据结构</code>。</p><p>如果现在不加强开发技能，后面的路越来越不好走，如果现在专职做DevOPS，提升开发技能，后面也有望做全栈开发。现在Golang也刚开始被大众所接受，大家都在一条起跑线上，公司招Golang更愿意开高价。</p><p><code>DevOPS最好前后端都要会---全栈，一般公司很少会招了DevOPS再招专门的前端来配合DevOPS，小公司更不用说了。</code> 再者，DevOPS会全栈的话，路子更宽，很方便专成专职开发，或者升成leader。</p><h4 id="发展">发展</h4><p>现在我已经铁了心，提升开发技能，要有产出。<br>目前的公司Ubisoft属于外企，很自由，有时间做自己感兴趣的事，公司也很支持，有时间去发展。不管做开发还是DevOPS，都要有自己的作品，要有产品化的思维，不然只是成千上万代码中的若干行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;不会开发的运维不是好运维&quot;&gt;不会开发的运维不是好运维&lt;/h3&gt;
&lt;h4 id=&quot;现状&quot;&gt;现状&lt;/h4&gt;
&lt;p&gt;从2011毕业到目前2019年，转眼间都干了快9年运维了。这9年也从一个懵懂骚年变成了两个孩子的爸。在为政府做事的公司体验过什么叫等级森严，在新加坡公司体
      
    
    </summary>
    
    
    
      <category term="devops" scheme="https://opscoder.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>为啥用Markdown全静态站</title>
    <link href="https://opscoder.com/article/2019-07-26-helloworld/"/>
    <id>https://opscoder.com/article/2019-07-26-helloworld/</id>
    <published>2019-07-26T02:51:24.000Z</published>
    <updated>2019-10-21T16:25:15.876Z</updated>
    
    <content type="html"><![CDATA[<h4 id="新博客上线啦">新博客上线啦</h4><p>  之前一直用WP，虽然有不足之处但还可以接受，直到最近TG群里有盆友在用<code>ZeroNet</code>写博客。他在手机上也有客户端，相当于在手机上也有一份博客的镜像，写完然后同步。由于是分布式的，类似于比特币，除了他可以摧毁，其他任何人都无法破坏。后面有看了<code>IPFS 星际文件</code>，感觉还是不适合用来写博客之类的。</p><p>  直到想到Markdown全静态站 + github这一组合。既不怕删帖、也不怕毁坏，备份容易，省去了数据库/权限的麻烦。简直有种返璞归真的感觉。中途尝试了jekyll + 其他主题，直到尝试啦Hexo + 目前的主题，感觉到才是想要的，然后注册了新域名opscoder.com绑了上去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;新博客上线啦&quot;&gt;新博客上线啦&lt;/h4&gt;
&lt;p&gt;  之前一直用WP，虽然有不足之处但还可以接受，直到最近TG群里有盆友在用&lt;code&gt;ZeroNet&lt;/code&gt;写博客。他在手机上也有客户端，相当于在手机上也有一份博客的镜像，写完然后同步。由于是分布式的，类似于比特
      
    
    </summary>
    
    
    
      <category term="新博客上线啦" scheme="https://opscoder.com/tags/%E6%96%B0%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
    
  </entry>
  
</feed>
